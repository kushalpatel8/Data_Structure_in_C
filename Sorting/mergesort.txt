Key Concepts
Divide and Conquer:

The array is divided into two halves until each subarray has one element.
Each subarray is then merged in a sorted manner to form the final sorted array.
Merge Function:

Merges two sorted arrays (a and b) into a single sorted array (res).
Recursive Sorting:

mergesort divides the array into smaller parts, recursively sorts them, and merges the results.
Function Details
merge():
Merges two sorted arrays (a and b) into a sorted array (res):
Compares elements from both arrays and inserts the smaller one into res.
Adds remaining elements from a or b if one array is exhausted.
mergesort():
Recursively sorts the array:
Base case: If the array has only one element, it is already sorted.
Divides the array into two halves (a and b).
Recursively sorts both halves.
Merges the two sorted halves into the original array v.
Dry Run
Input:
Array: {5, 1, 3, 0, 4, 9, 6}
Size: n = 7

Step 1: Initial Call
mergesort(arr, 7)

Split into:
Left half: {5, 1, 3}
Right half: {0, 4, 9, 6}
Step 2: Recursively Sort Left Half {5, 1, 3}
mergesort({5, 1, 3}, 3)

Split into:
Left: {5}
Right: {1, 3}
{5} is already sorted (base case).
Sort {1, 3}:
Split into {1} and {3}.
Merge {1} and {3}: Result {1, 3}.
Merge {5} and {1, 3}:

Compare:
5 > 1: Add 1 to result.
5 > 3: Add 3 to result.
Add remaining 5: Result {1, 3, 5}.
Step 3: Recursively Sort Right Half {0, 4, 9, 6}
mergesort({0, 4, 9, 6}, 4)

Split into:
Left: {0, 4}
Right: {9, 6}
Sort {0, 4}:

Split into {0} and {4}.
Merge {0} and {4}: Result {0, 4}.
Sort {9, 6}:

Split into {9} and {6}.
Merge {9} and {6}: Result {6, 9}.
Merge {0, 4} and {6, 9}:

Compare:
0 < 6: Add 0 to result.
4 < 6: Add 4 to result.
Add remaining 6 and 9: Result {0, 4, 6, 9}.
Step 4: Merge Left and Right Halves
Merge {1, 3, 5} and {0, 4, 6, 9}:

Compare:
1 > 0: Add 0 to result.
1 < 4: Add 1 to result.
3 < 4: Add 3 to result.
5 > 4: Add 4 to result.
5 < 6: Add 5 to result.
Add remaining 6 and 9: Result {0, 1, 3, 4, 5, 6, 9}.
Final Sorted Array
{0, 1, 3, 4, 5, 6, 9}

Explanation of Key Logic
Divide Phase:

Recursively splits the array until subarrays have one element each (base case).
Conquer Phase:

The merge function combines two sorted subarrays efficiently.
Memory Usage:

Temporary arrays a and b are allocated during each merge, which are freed after use.
This implementation achieves O(n log n) time complexity, where:

O(log n) for the divide steps.
O(n) for merging at each level.