Key Concepts of Radix Sort
Stable Sorting:

Preserves the relative order of elements with equal keys.
Sorting is done based on individual digits at different place values (ones, tens, hundreds, etc.).
Buckets (Queues):

Each digit (0–9) is associated with a bucket (queue) to temporarily hold numbers during each digit sorting phase.
Digit Extraction:

The digit at the current place value is extracted using (arr[i] / placevalue) % 10.
Iterative Process:

Repeat the process for all place values (from LSD to MSD) until the largest number is fully processed.
Key Functions
Queue Operations:
initialize: Sets up a queue with an empty state.
enqueue: Adds an element to the rear of the queue.
dequeue: Removes and returns an element from the front of the queue.
isempty: Checks if the queue is empty.
Max():
Finds the maximum value in the array. This determines the number of digits in the largest number (maxDigit).
radixSort():
Initialization:
Creates 10 queues (buckets), one for each digit.
Determines the number of digits in the largest number.
Digit-by-Digit Sorting:
For each digit (ones, tens, etc.):
Place numbers into buckets based on the current digit.
Collect numbers from buckets back into the array.
Move to the next digit (increment place value by a factor of 10).
Repeats until all digits are processed.
Dry Run
Input:
Array: {5, 1, 3, 0, 4, 9, 6}
Size: n = 7

Step 1: Initialization
Maximum value: maxval = 9
Number of digits: maxDigit = 1
Buckets initialized for digits 0–9.
Step 2: First Pass (Place Value = 1)
Extract LSD (units place): (arr[i] / 1) % 10
Numbers are placed into buckets based on the LSD:
Bucket 0: {0}
Bucket 1: {1}
Bucket 3: {3}
Bucket 4: {4}
Bucket 5: {5}
Bucket 6: {6}
Bucket 9: {9}
Collect numbers from buckets:
Resulting array: {0, 1, 3, 4, 5, 6, 9}.
Step 3: Second Pass (Place Value = 10)
No second pass is needed since maxDigit = 1.
Final Sorted Array:
{0, 1, 3, 4, 5, 6, 9}

Detailed Analysis of Key Logic
Placing Numbers in Buckets:
For each digit:

Use (arr[i] / placevalue) % 10 to extract the digit.
Place the number into the corresponding queue (buckets[bidx]).
Collecting Numbers from Buckets:
Iterate over all buckets (0–9).
Dequeue all elements from each bucket into the array, maintaining order.
Time and Space Complexity
Time Complexity:
Digit Passes: O(d), where d is the number of digits in the largest number.
Bucket Operations: O(n) for each pass, where n is the array size.
Total: O(n * d).
Space Complexity:
Buckets: 10 queues of size proportional to n.
Total: O(n + d).
Advantages
Efficient for sorting numbers with a small range of digits.
Stable sorting preserves the order of equal elements.
Limitations
Requires extra memory for buckets.
Not suitable for negative numbers without modifications.